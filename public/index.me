How to set CartItem.
const [cartItems, setCartItems] = useState<CartItemType[]>([]);

  function handleAddToCart(product: Product) {
    setCartItems((prev) => {
      const found = prev.find((item) => item.id === product.id);
      if (found) {
        // Increase quantity
        return prev.map((item) =>
          item.id === product.id
            ? { ...item, quantity: item.quantity + 1 }
            : item
        );
      } else {
        // Add new product with quantity 1
        return [...prev, { ...product, quantity: 1 }];
      }
    });
  }

...........................................................

for Navbar
<Navbar
        cartCount={cartItems.reduce((acc, item) => acc + item.quantity, 0)}
      />

......................................................................

For how to use react route
<Routes>
            <Route
              path="/"
              element={<ProductList onAddToCart={handleAddToCart} />}
            />

            <Route path="cart" element={<Cart cartItems={cartItems} />} />
</Routes>


....................................

footer liks color

 onIncrease: (id) => {
        set({
          cartItem: get().cartItem.map((item) =>
            item.id === id ? { ...item, quantity: item.quantity + 1 } : item
          ),
        });
      },

      // ..................................................................................

      onDecrease: (id) => {
        set({
          cartItem: get()
            .cartItem.map((item) =>
              item.id === id ? { ...item, quantity: item.quantity - 1 } : item
            )
            .filter((item) => item.quantity > 0),
        });
      },

      // ..................................................................................

      onDelete: (id) => {
        set({
          cartItem: get().cartItem.filter((item) => item.id !== id),
        });
      },
    }),


     onDelete: (id: number) => void;
  onIncrease: (id: number) => void;
  onDecrease: (id: number) => void;
